<?js
var data = obj;
var self = this;
var arrangement = self.resolveArrangement([ "method", "default" ]);
var defaults = [ "description", "augments", "type", "this", "params", "details", "requires", "fires", "listens", "listeners", "exceptions", "returns", "examples" ]; 
?>
<?js // console.log("methods %s", data.longname) ?>

<hr>
<dt>
    <h4 class="name method-title-<?js= kind ?>" id="<?js= id ?>"><?js= self.scaffoldPartialBySpec(self, data, "method:default:attribs") + (kind === 'class' ? 'new ' : '') + name + ((kind !== 'event' && data.signature) ? data.signature : '') ?></h4>
    
    <?js if (data.summary) { ?>
    <p class="summary"><?js= summary ?></p>
    <?js } ?>
</dt>
<dd>
    <?js if(data.kind === 'module') { console.log(data.longname + "is a module"); } // Looking for an example, see #requires ?>

    <?js arrangement.order.forEach(function(entry) { 
            if(entry === "*") { 
                // Get all the default listings that weren't explicitly placed
                var trimmed = defaults.reduce(function(acc, cur) {
                    if(arrangement.order.indexOf(cur) === -1) {
                        acc.push(cur);
                    }
                    return acc;
                }, []);

                trimmed.forEach(function(listing) { ?>
                    <?js= self.scaffoldPartial(self, data, arrangement, listing) ?>
                <?js }); ?>
            <?js } else { ?>
                <?js= self.scaffoldPartial(self, data, arrangement, entry) ?>
            <?js } ?>
    <?js }); ?>

    <?js if(data.augments && data.alias && data.alias.indexOf('module:') === 0) { console.log("Method Extends! " + data.longname); } ?>
</dd>
